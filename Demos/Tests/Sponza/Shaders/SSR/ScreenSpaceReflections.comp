#version 450

layout(binding = 0) uniform sampler2D inSceneImage;
layout(binding = 1) uniform sampler2D inNormalImage;
layout(binding = 2) uniform sampler2D inDepthImage;

layout(binding = 3, rgba8) restrict writeonly uniform image2D outImage;

layout(binding = 4) uniform ProjectionMatrix 
{
	mat4 matrix;
} lensProjection;

const float contribution = 0.35f;

vec3 CalcViewPositionFromDepth(in vec2 TexCoord)
{
    vec3 rawPosition = vec3(TexCoord, texture(inDepthImage, TexCoord).r);
    vec4 ScreenSpacePosition = vec4(rawPosition * 2 - 1, 1);
    vec4 ViewPosition = inverse(lensProjection.matrix) * ScreenSpacePosition;
    return ViewPosition.xyz / ViewPosition.w;
}

vec2 RayCast(vec3 dir, inout vec3 hitCoord, out float dDepth)
{
    dir *= 0.25f;  

    for(int i = 0; i < 20; ++i) 
    {
        hitCoord += dir; 

        vec4 projectedCoord = lensProjection.matrix * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5; 

        float depth = CalcViewPositionFromDepth(projectedCoord.xy).z;
        dDepth = hitCoord.z - depth; 

        if(dDepth < 0.0)
            return projectedCoord.xy;
    }

    return vec2(0.0f);
}

layout(local_size_x=32, local_size_y=32, local_size_z=1) in;
void main()
{
    const ivec2 index = ivec2(gl_GlobalInvocationID);
    const vec2 texSize = vec2(textureSize(inSceneImage, 0).xy);
	vec2 uv = vec2(index) / texSize;

    vec3 View_Normal = texture(inNormalImage, uv).xyz;      
    float View_Depth = texture(inDepthImage, uv).r;    
    vec3 ScreenPos = 2.0f * vec3(uv, View_Depth) - 1.0f;
    vec3 View_Pos = CalcViewPositionFromDepth(uv);

    // Reflection vector
    vec3 reflected = normalize(reflect(normalize(View_Pos), normalize(View_Normal))); 

    // Ray cast
    vec3 hitPos = View_Pos.xyz;
    float minRayStep = 30.0f;
    float dDepth; 
    vec2 coords = RayCast(reflected * max(minRayStep, -View_Pos.z), hitPos, dDepth); 

    vec4 finalColor = texture(inSceneImage, coords) * contribution; 
    imageStore(outImage, index, clamp(texture(inSceneImage, uv) + finalColor, vec4(0.0f), vec4(1.0f)));
}